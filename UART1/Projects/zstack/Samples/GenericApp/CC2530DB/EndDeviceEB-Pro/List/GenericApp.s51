///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        31/May/2016  17:05:19 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\Source\GenericApp.c            /
//    Command line       =  -f C:\Users\Administrator\Desktop\1\Projects\zsta /
//                          ck\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wEndev.cfg (-DCPU32MHZ                    /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg (-DSECURE=0                      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\Administrator\Des /
//                          ktop\1\Projects\zstack\Samples\GenericApp\Source\ /
//                          GenericApp.c -D ZIGBEEPRO -D NWK_AUTO_POLL -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -lC C:\Users\Administrator\Desktop\ /
//                          1\Projects\zstack\Samples\GenericApp\CC2530DB\End /
//                          DeviceEB-Pro\List\ -lA C:\Users\Administrator\Des /
//                          ktop\1\Projects\zstack\Samples\GenericApp\CC2530D /
//                          B\EndDeviceEB-Pro\List\ --diag_suppress           /
//                          Pe001,Pa010 -o C:\Users\Administrator\Desktop\1\P /
//                          rojects\zstack\Samples\GenericApp\CC2530DB\EndDev /
//                          iceEB-Pro\Obj\ -e --debug --core=plain            /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\ -I                   /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\SOURCE\ -I         /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\ZMAIN\TI2530 /
//                          DB\ -I C:\Users\Administrator\Desktop\1\Projects\ /
//                          zstack\Samples\GenericApp\CC2530DB\..\..\..\..\.. /
//                          \COMPONENTS\MT\ -I C:\Users\Administrator\Desktop /
//                          \1\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I           /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\HAL\TARGET\CC2530EB\ -I                      /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\MCU\CCSOC\ -I                           /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\OSAL\INCLUDE\ -I C:\Users\Administrator\Desk /
//                          top\1\Projects\zstack\Samples\GenericApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\AF\ -I           /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\NWK\ -I C:\Users\Administrator\Desktop /
//                          \1\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SEC\ -I             /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\SAPI\ -I C:\Users\Administrator\Deskto /
//                          p\1\Projects\zstack\Samples\GenericApp\CC2530DB\. /
//                          .\..\..\..\..\COMPONENTS\STACK\SYS\ -I            /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\STACK\ZDO\ -I C:\Users\Administrator\Desktop /
//                          \1\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\F8W\ -I              /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\ZMAC\ -I C:\Users\Administrator\Desktop\1\Pr /
//                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\. /
//                          .\..\..\COMPONENTS\SERVICES\SADDR\ -I             /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\SERVICES\SDATA\ -I                           /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\INCLUDE\ -I C:\Users\Administrator\Deskt /
//                          op\1\Projects\zstack\Samples\GenericApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I      /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\LOW_LEVEL\srf04\ -I                      /
//                          C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON /
//                          ENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz        /
//                          --require_prototypes                              /
//    List file          =  C:\Users\Administrator\Desktop\1\Projects\zstack\ /
//                          Samples\GenericApp\CC2530DB\EndDeviceEB-Pro\List\ /
//                          GenericApp.s51                                    /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GenericApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_MessageMSGCB?relay
        FUNCTION ??GenericApp_MessageMSGCB?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        PUBLIC GenericApp_DstAddr
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GenericApp_MessageMSGCB
        FUNCTION GenericApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GenericApp_TaskID
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
AT_AF_init          SYMBOL "AT_AF_init"
AT_UART_init        SYMBOL "AT_UART_init"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
HalLedSet           SYMBOL "HalLedSet"
HalUARTWrite        SYMBOL "HalUARTWrite"
??AT_AF_init?relay  SYMBOL "?relay", AT_AF_init
??AT_UART_init?relay SYMBOL "?relay", AT_UART_init
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_MessageMSGCB SYMBOL "GenericApp_MessageMSGCB"
??GenericApp_MessageMSGCB?relay SYMBOL "?relay", GenericApp_MessageMSGCB
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent

        EXTERN AT_AF_init
        FUNCTION AT_AF_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AT_UART_init
        FUNCTION AT_UART_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AT_AF_init?relay
        FUNCTION ??AT_AF_init?relay,00H
        EXTERN ??AT_UART_init?relay
        FUNCTION ??AT_UART_init?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H

// C:\Users\Administrator\Desktop\1\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 #include "AT_UART.h"
//   10 #include "AT_AF.h"
//   11 #include "hal_led.h"
//   12 
//   13 #include "GenericApp.h"
//   14 #include "DebugTrace.h"
//   15 
//   16 #if !defined( WIN32 )
//   17   #include "OnBoard.h"
//   18 #endif
//   19 
//   20 /* HAL */
//   21 #include "hal_lcd.h"
//   22 #include "hal_led.h"
//   23 #include "hal_key.h"
//   24 #include "hal_uart.h"
//   25 
//   26 /*********************************************************************
//   27  * MACROS
//   28  */
//   29 #define HAL_LED_OFF   1
//   30 #define HAL_LED_ON    0
//   31 
//   32 // This is the max byte count per OTA message.
//   33 
//   34 /*********************************************************************
//   35  * LOCAL VARIABLES
//   36  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   37 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   38 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   39 afAddrType_t GenericApp_DstAddr;
GenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   40 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 byte GenericApp_TaskID;   // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   42                           // This variable will be received when
//   43                           // GenericApp_Init() is called.
//   44 /*********************************************************************
//   45  * LOCAL FUNCTIONS
//   46  */
//   47 void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//   48 
//   49 /*********************************************************************
//   50  * NETWORK LAYER CALLBACKS
//   51  */
//   52 
//   53 /*********************************************************************
//   54  * PUBLIC FUNCTIONS
//   55  */
//   56 
//   57 /*********************************************************************
//   58  * @fn      GenericApp_Init
//   59  *
//   60  * @brief   Initialization function for the Generic App Task.
//   61  *          This is called during initialization and should contain
//   62  *          any application specific initialization (ie. hardware
//   63  *          initialization/setup, table initialization, power up
//   64  *          notificaiton ... ).
//   65  *
//   66  * @param   task_id - the ID assigned by OSAL.  This ID should be
//   67  *                    used to send messages and set timers.
//   68  *
//   69  * @return  none
//   70  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   71 void GenericApp_Init( byte task_id )
GenericApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function GenericApp_Init
        CODE
//   72 {
        FUNCALL GenericApp_Init, AT_AF_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, AT_UART_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//   73   
//   74   GenericApp_TaskID = task_id;
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//   75   GenericApp_NwkState = DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//   76   
//   77   AT_AF_init(GenericApp_TaskID);
        ; Setup parameters for call to function AT_AF_init
        LCALL   ??AT_AF_init?relay
//   78   AT_UART_init();
        ; Setup parameters for call to function AT_UART_init
        LCALL   ??AT_UART_init?relay
//   79 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   80 
//   81 /*********************************************************************
//   82  * @fn      GenericApp_ProcessEvent
//   83  *
//   84  * @brief   Generic Application Task event processor.  This function
//   85  *          is called to process all events for the task.  Events
//   86  *          include timers, messages and any other user defined events.
//   87  *
//   88  * @param   task_id  - The OSAL assigned task ID.
//   89  * @param   events - events to process.  This is a bit map and can
//   90  *                   contain more than one event.
//   91  *
//   92  * @return  none
//   93  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   94 UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
GenericApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GenericApp_ProcessEvent
        CODE
//   95 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   96     afIncomingMSGPacket_t *MSGpkt;
//   97     
//   98     if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??GenericApp_ProcessEvent_0
//   99     {
//  100         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  101         while ( MSGpkt )
//  102         {
//  103             switch ( MSGpkt->hdr.event )
??GenericApp_ProcessEvent_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1a
        JNZ     ??GenericApp_ProcessEvent_3
//  104             {
//  105             case AF_INCOMING_MSG_CMD:
//  106                 GenericApp_MessageMSGCB(MSGpkt);
        ; Setup parameters for call to function GenericApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??GenericApp_MessageMSGCB?relay
//  107                 break;
//  108             default:
//  109                 break;
//  110             }
//  111             osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  112             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  113         }
        MOV     A,R6
        ORL     A,R7
        JNZ     ??GenericApp_ProcessEvent_2
//  114         return (events ^ SYS_EVENT_MSG);
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_4
//  115     }
//  116     return 0;
??GenericApp_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_4:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  117 }
//  118 
//  119 /*********************************************************************
//  120  * LOCAL FUNCTIONS
//  121  */
//  122 
//  123 /*********************************************************************
//  124  * @fn      GenericApp_MessageMSGCB
//  125  *
//  126  * @brief   Data message processor callback.  This function processes
//  127  *          any incoming data - probably from other devices.  So, based
//  128  *          on cluster ID, perform the intended action.
//  129  *
//  130  * @param   none
//  131  *
//  132  * @return  none
//  133  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  134 void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
GenericApp_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function GenericApp_MessageMSGCB
        CODE
//  135 {
        FUNCALL GenericApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  136   byte data ;
//  137      
//  138   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_MessageMSGCB_0:
        JNZ     ??GenericApp_MessageMSGCB_1
//  139   {
//  140     case GENERICAPP_CLUSTERID:
//  141      data  = pkt->cmd.Data[0];    //osal_memcpy(&data, pkt->cmd.Data, 1);
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  142      
//  143      if(data == 0x10){
        XRL     A,#0x10
        JNZ     ??GenericApp_MessageMSGCB_2
//  144        HalLedSet(HAL_LED_1, HAL_LED_ON); 
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??GenericApp_MessageMSGCB_3:
        MOV     R1,#0x1
        SJMP    ??GenericApp_MessageMSGCB_4
//  145      }
//  146      else if(data == 0x11){
??GenericApp_MessageMSGCB_2:
        MOVX    A,@DPTR
        XRL     A,#0x11
        JNZ     ??GenericApp_MessageMSGCB_5
//  147       HalLedSet(HAL_LED_1, HAL_LED_OFF); 
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??GenericApp_MessageMSGCB_3
//  148      }
//  149      else if(data == 0x20){
??GenericApp_MessageMSGCB_5:
        MOVX    A,@DPTR
        XRL     A,#0x20
        JNZ     ??GenericApp_MessageMSGCB_6
//  150        HalLedSet(HAL_LED_2, HAL_LED_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
??GenericApp_MessageMSGCB_7:
        MOV     R1,#0x2
        SJMP    ??GenericApp_MessageMSGCB_4
//  151      }
//  152      else if(data == 0x21){
??GenericApp_MessageMSGCB_6:
        MOVX    A,@DPTR
        XRL     A,#0x21
        JNZ     ??GenericApp_MessageMSGCB_8
//  153       HalLedSet(HAL_LED_2, HAL_LED_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        SJMP    ??GenericApp_MessageMSGCB_7
//  154      }
//  155      else if(data == 0x30){
??GenericApp_MessageMSGCB_8:
        MOVX    A,@DPTR
        XRL     A,#0x30
        JNZ     ??GenericApp_MessageMSGCB_9
//  156        HalLedSet(HAL_LED_3, HAL_LED_ON);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        SJMP    ??GenericApp_MessageMSGCB_10
//  157      }
//  158      else if(data == 0x31){
??GenericApp_MessageMSGCB_9:
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??GenericApp_MessageMSGCB_11
//  159        HalLedSet(HAL_LED_3, HAL_LED_OFF); 
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??GenericApp_MessageMSGCB_10:
        MOV     R1,#0x4
??GenericApp_MessageMSGCB_4:
        LCALL   ??HalLedSet?relay
//  160      }
//  161      
//  162      HalUARTWrite(HAL_UART_PORT_0,&data,1);
??GenericApp_MessageMSGCB_11:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  163       break;
//  164   }
//  165 }
??GenericApp_MessageMSGCB_1:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_MessageMSGCB

        END
//  166 
// 
// 247 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//  14 bytes in segment XDATA_Z
// 
// 265 bytes of CODE  memory
//  14 bytes of XDATA memory
//
//Errors: none
//Warnings: none
