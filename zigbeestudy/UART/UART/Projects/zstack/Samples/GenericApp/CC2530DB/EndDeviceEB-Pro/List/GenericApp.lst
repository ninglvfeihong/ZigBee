###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         31/May/2016  17:05:19 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\Source\GenericApp.c              #
#    Command line       =  -f C:\Users\Administrator\Desktop\1\Projects\zstac #
#                          k\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    #
#                          -DBLINK_LEDS) -f C:\Users\Administrator\Desktop\1\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\Source\GenericApp.c -D           #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK  #
#                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                   #
#                          LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC           #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\EndDeviceEB-Pro\List\   #
#                          -lA C:\Users\Administrator\Desktop\1\Projects\zsta #
#                          ck\Samples\GenericApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\ --diag_suppress Pe001,Pa010 -o                  #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\EndDeviceEB-Pro\Obj\    #
#                          -e --debug --core=plain --dptr=16,1                #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I C:\Users\Administrator\Desktop\1\Projects\zstac #
#                          k\Samples\GenericApp\CC2530DB\ -I                  #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\SOURCE\ -I           #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\ZMAIN\TI2530DB #
#                          \ -I C:\Users\Administrator\Desktop\1\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MT\ -I C:\Users\Administrator\Desktop\1\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\INCLUDE\ -I                  #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\HAL\TARGET\CC2530EB\ -I                         #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\OSAL\MCU\CCSOC\ -I C:\Users\Administrator\Deskt #
#                          op\1\Projects\zstack\Samples\GenericApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I          #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\STACK\AF\ -I C:\Users\Administrator\Desktop\1\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\STACK\NWK\ -I                   #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\STACK\SEC\ -I C:\Users\Administrator\Desktop\1\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\STACK\SAPI\ -I                 #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\STACK\SYS\ -I C:\Users\Administrator\Desktop\1\ #
#                          Projects\zstack\Samples\GenericApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\STACK\ZDO\ -I                  #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\ZMAC\F8W\ -I C:\Users\Administrator\Desktop\1\P #
#                          rojects\zstack\Samples\GenericApp\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\ZMAC\ -I                        #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\SERVICES\SADDR\ -I C:\Users\Administrator\Deskt #
#                          op\1\Projects\zstack\Samples\GenericApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I        #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MAC\INCLUDE\ -I C:\Users\Administrator\Desktop\ #
#                          1\Projects\zstack\Samples\GenericApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I           #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MAC\LOW_LEVEL\srf04\ -I                         #
#                          C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz           #
#                          --require_prototypes                               #
#    List file          =  C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\EndDeviceEB-Pro\List\Ge #
#                          nericApp.lst                                       #
#    Object file        =  C:\Users\Administrator\Desktop\1\Projects\zstack\S #
#                          amples\GenericApp\CC2530DB\EndDeviceEB-Pro\Obj\Gen #
#                          ericApp.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\1\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /*********************************************************************
      2           * INCLUDES
      3           */
      4          #include "OSAL.h"
      5          #include "AF.h"
      6          #include "ZDApp.h"
      7          #include "ZDObject.h"
      8          #include "ZDProfile.h"
      9          #include "AT_UART.h"
     10          #include "AT_AF.h"
     11          #include "hal_led.h"
     12          
     13          #include "GenericApp.h"
     14          #include "DebugTrace.h"
     15          
     16          #if !defined( WIN32 )
     17            #include "OnBoard.h"
     18          #endif
     19          
     20          /* HAL */
     21          #include "hal_lcd.h"
     22          #include "hal_led.h"
     23          #include "hal_key.h"
     24          #include "hal_uart.h"
     25          
     26          /*********************************************************************
     27           * MACROS
     28           */
     29          #define HAL_LED_OFF   1
     30          #define HAL_LED_ON    0
     31          
     32          // This is the max byte count per OTA message.
     33          
     34          /*********************************************************************
     35           * LOCAL VARIABLES
     36           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     37          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     38          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     40          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     42                                    // This variable will be received when
     43                                    // GenericApp_Init() is called.
     44          /*********************************************************************
     45           * LOCAL FUNCTIONS
     46           */
     47          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     48          
     49          /*********************************************************************
     50           * NETWORK LAYER CALLBACKS
     51           */
     52          
     53          /*********************************************************************
     54           * PUBLIC FUNCTIONS
     55           */
     56          
     57          /*********************************************************************
     58           * @fn      GenericApp_Init
     59           *
     60           * @brief   Initialization function for the Generic App Task.
     61           *          This is called during initialization and should contain
     62           *          any application specific initialization (ie. hardware
     63           *          initialization/setup, table initialization, power up
     64           *          notificaiton ... ).
     65           *
     66           * @param   task_id - the ID assigned by OSAL.  This ID should be
     67           *                    used to send messages and set timers.
     68           *
     69           * @return  none
     70           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     71          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
     72          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
     73            
     74            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
     75            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
     76            
     77            AT_AF_init(GenericApp_TaskID);
   \   000010                ; Setup parameters for call to function AT_AF_init
   \   000010   12....       LCALL   ??AT_AF_init?relay
     78            AT_UART_init();
   \   000013                ; Setup parameters for call to function AT_UART_init
   \   000013   12....       LCALL   ??AT_UART_init?relay
     79          }
   \   000016   7F01         MOV     R7,#0x1
   \   000018   02....       LJMP    ?BANKED_LEAVE_XDATA
     80          
     81          /*********************************************************************
     82           * @fn      GenericApp_ProcessEvent
     83           *
     84           * @brief   Generic Application Task event processor.  This function
     85           *          is called to process all events for the task.  Events
     86           *          include timers, messages and any other user defined events.
     87           *
     88           * @param   task_id  - The OSAL assigned task ID.
     89           * @param   events - events to process.  This is a bit map and can
     90           *                   contain more than one event.
     91           *
     92           * @return  none
     93           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     94          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
     95          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     96              afIncomingMSGPacket_t *MSGpkt;
     97              
     98              if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6036         JZ      ??GenericApp_ProcessEvent_0
     99              {
    100                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8017         SJMP    ??GenericApp_ProcessEvent_1
    101                  while ( MSGpkt )
    102                  {
    103                      switch ( MSGpkt->hdr.event )
   \                     ??GenericApp_ProcessEvent_2:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   641A         XRL     A,#0x1a
   \   000017   7007         JNZ     ??GenericApp_ProcessEvent_3
    104                      {
    105                      case AF_INCOMING_MSG_CMD:
    106                          GenericApp_MessageMSGCB(MSGpkt);
   \   000019                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   ??GenericApp_MessageMSGCB?relay
    107                          break;
    108                      default:
    109                          break;
    110                      }
    111                      osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000020                ; Setup parameters for call to function osal_msg_deallocate
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??osal_msg_deallocate?relay
    112                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000027                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000027   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   ??osal_msg_receive?relay
   \   00002F   8A..         MOV     ?V0 + 2,R2
   \   000031   8B..         MOV     ?V0 + 3,R3
   \   000033   AE..         MOV     R6,?V0 + 2
   \   000035   AF..         MOV     R7,?V0 + 3
    113                  }
   \   000037   EE           MOV     A,R6
   \   000038   4F           ORL     A,R7
   \   000039   70D5         JNZ     ??GenericApp_ProcessEvent_2
    114                  return (events ^ SYS_EVENT_MSG);
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   6480         XRL     A,#0x80
   \   000041   FB           MOV     R3,A
   \   000042   8004         SJMP    ??GenericApp_ProcessEvent_4
    115              }
    116              return 0;
   \                     ??GenericApp_ProcessEvent_0:
   \   000044   7A00         MOV     R2,#0x0
   \   000046   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_4:
   \   000048   7F04         MOV     R7,#0x4
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA
    117          }
    118          
    119          /*********************************************************************
    120           * LOCAL FUNCTIONS
    121           */
    122          
    123          /*********************************************************************
    124           * @fn      GenericApp_MessageMSGCB
    125           *
    126           * @brief   Data message processor callback.  This function processes
    127           *          any incoming data - probably from other devices.  So, based
    128           *          on cluster ID, perform the intended action.
    129           *
    130           * @param   none
    131           *
    132           * @return  none
    133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     GenericApp_MessageMSGCB:
    135          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    136            byte data ;
    137               
    138            switch ( pkt->clusterId )
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6401         XRL     A,#0x1
   \   000014   7002         JNZ     ??GenericApp_MessageMSGCB_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??GenericApp_MessageMSGCB_0:
   \   000018   7069         JNZ     ??GenericApp_MessageMSGCB_1
    139            {
    140              case GENERICAPP_CLUSTERID:
    141               data  = pkt->cmd.Data[0];    //osal_memcpy(&data, pkt->cmd.Data, 1);
   \   00001A   EA           MOV     A,R2
   \   00001B   2421         ADD     A,#0x21
   \   00001D   F582         MOV     DPL,A
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F583         MOV     DPH,A
   \   00002A   8882         MOV     DPL,R0
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   F0           MOVX    @DPTR,A
    142               
    143               if(data == 0x10){
   \   000034   6410         XRL     A,#0x10
   \   000036   7006         JNZ     ??GenericApp_MessageMSGCB_2
    144                 HalLedSet(HAL_LED_1, HAL_LED_ON); 
   \   000038                ; Setup parameters for call to function HalLedSet
   \   000038   7A00         MOV     R2,#0x0
   \                     ??GenericApp_MessageMSGCB_3:
   \   00003A   7901         MOV     R1,#0x1
   \   00003C   802F         SJMP    ??GenericApp_MessageMSGCB_4
    145               }
    146               else if(data == 0x11){
   \                     ??GenericApp_MessageMSGCB_2:
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6411         XRL     A,#0x11
   \   000041   7004         JNZ     ??GenericApp_MessageMSGCB_5
    147                HalLedSet(HAL_LED_1, HAL_LED_OFF); 
   \   000043                ; Setup parameters for call to function HalLedSet
   \   000043   7A01         MOV     R2,#0x1
   \   000045   80F3         SJMP    ??GenericApp_MessageMSGCB_3
    148               }
    149               else if(data == 0x20){
   \                     ??GenericApp_MessageMSGCB_5:
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6420         XRL     A,#0x20
   \   00004A   7006         JNZ     ??GenericApp_MessageMSGCB_6
    150                 HalLedSet(HAL_LED_2, HAL_LED_ON);
   \   00004C                ; Setup parameters for call to function HalLedSet
   \   00004C   7A00         MOV     R2,#0x0
   \                     ??GenericApp_MessageMSGCB_7:
   \   00004E   7902         MOV     R1,#0x2
   \   000050   801B         SJMP    ??GenericApp_MessageMSGCB_4
    151               }
    152               else if(data == 0x21){
   \                     ??GenericApp_MessageMSGCB_6:
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6421         XRL     A,#0x21
   \   000055   7004         JNZ     ??GenericApp_MessageMSGCB_8
    153                HalLedSet(HAL_LED_2, HAL_LED_OFF);
   \   000057                ; Setup parameters for call to function HalLedSet
   \   000057   7A01         MOV     R2,#0x1
   \   000059   80F3         SJMP    ??GenericApp_MessageMSGCB_7
    154               }
    155               else if(data == 0x30){
   \                     ??GenericApp_MessageMSGCB_8:
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6430         XRL     A,#0x30
   \   00005E   7004         JNZ     ??GenericApp_MessageMSGCB_9
    156                 HalLedSet(HAL_LED_3, HAL_LED_ON);
   \   000060                ; Setup parameters for call to function HalLedSet
   \   000060   7A00         MOV     R2,#0x0
   \   000062   8007         SJMP    ??GenericApp_MessageMSGCB_10
    157               }
    158               else if(data == 0x31){
   \                     ??GenericApp_MessageMSGCB_9:
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6431         XRL     A,#0x31
   \   000067   7007         JNZ     ??GenericApp_MessageMSGCB_11
    159                 HalLedSet(HAL_LED_3, HAL_LED_OFF); 
   \   000069                ; Setup parameters for call to function HalLedSet
   \   000069   7A01         MOV     R2,#0x1
   \                     ??GenericApp_MessageMSGCB_10:
   \   00006B   7904         MOV     R1,#0x4
   \                     ??GenericApp_MessageMSGCB_4:
   \   00006D   12....       LCALL   ??HalLedSet?relay
    160               }
    161               
    162               HalUARTWrite(HAL_UART_PORT_0,&data,1);
   \                     ??GenericApp_MessageMSGCB_11:
   \   000070                ; Setup parameters for call to function HalUARTWrite
   \   000070   7C01         MOV     R4,#0x1
   \   000072   7D00         MOV     R5,#0x0
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   AA82         MOV     R2,DPL
   \   00007C   AB83         MOV     R3,DPH
   \   00007E   7900         MOV     R1,#0x0
   \   000080   12....       LCALL   ??HalUARTWrite?relay
    163                break;
    164            }
    165          }
   \                     ??GenericApp_MessageMSGCB_1:
   \   000083   7401         MOV     A,#0x1
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   D083         POP     DPH
   \   00008A   D082         POP     DPL
   \   00008C   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB
    166          

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     GenericApp_Init                  0      0      9
       -> AT_AF_init                  0      0     18
       -> AT_UART_init                0      0     18
     GenericApp_MessageMSGCB          3      0     13
       -> HalLedSet                   4      0      2
       -> HalLedSet                   4      0      2
       -> HalLedSet                   4      0      2
       -> HalLedSet                   4      0      2
       -> HalLedSet                   4      0      2
       -> HalLedSet                   4      0      2
       -> HalUARTWrite                4      0      2
     GenericApp_ProcessEvent          0      0     12
       -> osal_msg_receive            0      0     24
       -> GenericApp_MessageMSGCB     0      0     24
       -> osal_msg_deallocate         0      0     24
       -> osal_msg_receive            0      0     24


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     GenericApp_NwkState                1
     GenericApp_DstAddr                12
     GenericApp_TaskID                  1
     GenericApp_Init                   27
     GenericApp_ProcessEvent           77
     GenericApp_MessageMSGCB          143
     ??GenericApp_Init?relay            6
     ??GenericApp_ProcessEvent?relay    6
     ??GenericApp_MessageMSGCB?relay    6

 
 247 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
  14 bytes in segment XDATA_Z
 
 265 bytes of CODE  memory
  14 bytes of XDATA memory

Errors: none
Warnings: none
